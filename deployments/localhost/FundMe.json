{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountFunded",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "funderIndex",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd85d300ebfe95bfc33c447a90208a154349e187960d2d20ba38338eecebcd735",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "919268",
    "logsBloom": "0x
    "blockHash": "0x019ee2e1970a675390a1844948c09336d7c57d2ddd01820788258fc142059049",
    "transactionHash": "0xd85d300ebfe95bfc33c447a90208a154349e187960d2d20ba38338eecebcd735",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "919268",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "8a8f0467771d7b4c8936c39ccf82b4d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountFunded\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"funderIndex\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Ameer Hamza\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This function gets conversion rate (Eth -> USD) from PriceConverter library\"},\"getAddressToAmountFunded(address)\":{\"details\":\"sAddressToAmountFunded is prefixed with s to demonstrate that it is storage variableStorage variables should be handled carefully because they will cost a lot of gas\",\"params\":{\"funder\":\"This should be a uint256\"},\"returns\":{\"amountFunded\":\"by the funder\"}},\"getFunder(uint256)\":{\"details\":\"sFunders is prefixed with s to demonstrate that it is storage variableStorage variables should be handled carefully because they will cost a lot of gas\",\"params\":{\"funderIndex\":\"This should be a uint256\"},\"returns\":{\"_0\":\"address of the funder\"}},\"getOwner()\":{\"details\":\"iOwner is prefixed with 'i' to show that it is immutableImmutable variables can save some gas\",\"returns\":{\"_0\":\"address\"}},\"getPriceFeed()\":{\"returns\":{\"_0\":\"priceFeed instance of AggregatorV3\"}}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function collect funds and save into FundMe contract\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"This function returns the amount funded by any address\"},\"getFunder(uint256)\":{\"notice\":\"This function returns the funder by index\"},\"getOwner()\":{\"notice\":\"This function returns the owner of the contract\"},\"getPriceFeed()\":{\"notice\":\"This function returns the priceFeed instance\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"/* \\n    Order of Statements, Definitions in Contract\\n\\n    1. Pragma\\n    2. Imports\\n    3. errors \\n        a. Prefix with contract name like FundMe__\\n    4. Interfaces\\n    5. Libraries\\n    6. Contracts\\n        a. Type declarations (Like using libraries)\\n        b. State variables\\n        c. Events\\n        d. Modifiers\\n        e. Functions\\n            i.      constructor\\n            ii.     receive\\n            iii.    fallback\\n            iv.     external\\n            v.      public\\n            vi.     internal\\n            vii.    private\\n            viii.   view / pure\\n */\\n\\n/* \\n    * Get funds from users\\n    * Withdraw funds\\n    * Set a minimum funding value in USD\\n\\n */\\n\\n// SPDX-License-Identifier: None\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\nerror FundMe__WithdrawSendError();\\n\\n/** @title A contract for crowd funding\\n *  @author Ameer Hamza\\n *  @notice This contract is to demo a sample funding contract\\n *  @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    // 21,415 gas - constant\\n    // 23,515 gas - non-constant\\n\\n    address[] private sFunders;\\n\\n    mapping(address => uint256) public sAddressToAmountFunded;\\n\\n    address private immutable iOwner;\\n\\n    // 21,508 gas - immutable\\n    // 23,644 gas - non-immutable\\n\\n    AggregatorV3Interface private immutable priceFeed;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != iOwner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(address _priceFeedAddress) {\\n        iOwner = msg.sender;\\n        priceFeed = AggregatorV3Interface(_priceFeedAddress);\\n    }\\n\\n    /** @notice This function returns the owner of the contract\\n     *  @dev iOwner is prefixed with 'i' to show that it is immutable\\n     *  @dev Immutable variables can save some gas\\n     *  @return address\\n     */\\n    function getOwner() external view returns (address) {\\n        return iOwner;\\n    }\\n\\n    /** @notice This function returns the funder by index\\n     *  @dev sFunders is prefixed with s to demonstrate that it is storage variable\\n     *  @dev Storage variables should be handled carefully because they will cost a lot of gas\\n     *  @param funderIndex This should be a uint256\\n     *  @return address of the funder\\n     */\\n    function getFunder(uint256 funderIndex) external view returns (address) {\\n        return sFunders[funderIndex];\\n    }\\n\\n    /** @notice This function returns the amount funded by any address\\n     *  @dev sAddressToAmountFunded is prefixed with s to demonstrate that it is storage variable\\n     *  @dev Storage variables should be handled carefully because they will cost a lot of gas\\n     *  @param funder This should be a uint256\\n     *  @return amountFunded by the funder\\n     */\\n    function getAddressToAmountFunded(address funder)\\n        external\\n        view\\n        returns (uint256 amountFunded)\\n    {\\n        return sAddressToAmountFunded[funder];\\n    }\\n\\n    /** @notice This function returns the priceFeed instance\\n     *  @return priceFeed instance of AggregatorV3\\n     */\\n    function getPriceFeed() external view returns (AggregatorV3Interface) {\\n        return priceFeed;\\n    }\\n\\n    /** @notice This function collect funds and save into FundMe contract\\n     *  @dev This function gets conversion rate (Eth -> USD) from PriceConverter library\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough\\\"\\n        );\\n        sFunders.push(msg.sender);\\n        sAddressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex;\\n            funderIndex < sFunders.length;\\n            funderIndex++\\n        ) {\\n            address funder = sFunders[funderIndex];\\n            sAddressToAmountFunded[funder] = 0;\\n        }\\n\\n        // Reset the array\\n        sFunders = new address[](0);\\n\\n        // Actually withdraw the funds\\n\\n        // Call - forward all remaining gas, returns bool\\n        // (bool callSuccess, ) = payable(msg.sender).call{\\n        //     value: address(this).balance\\n        // }(\\\"\\\");\\n        // require(callSuccess, \\\"Call Failed\\\");\\n\\n        // Transfer - 2300 gas, throws error if fails\\n        payable(msg.sender).transfer(address(this).balance);\\n\\n        // // Send - 2300 gas, returns false if fails\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess,\\\"Send Failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory fundersArray = sFunders;\\n        // Mappings can't be in memory\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < fundersArray.length;\\n            funderIndex++\\n        ) {\\n            address funder = fundersArray[funderIndex];\\n            sAddressToAmountFunded[funder] = 0;\\n        }\\n\\n        sFunders = new address[](0);\\n\\n        require(payable(msg.sender).send(address(this).balance), \\\"Send Failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1755edf26ce16c97ec6719dccdd203208b57f7236f9a62acc16bb0933b645157\",\"license\":\"None\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: None\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        // ABI\\n        // Address (Rinkeby)\\t0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        /**\\n         * ETH In terms of USD\\n         * 'price' has 8 decimals\\n         * 'msg.value' has 18 decimals\\n         * multiply by 1e10 to make it equal to 1e18\\n         */\\n\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPriceInUSD = getPrice(priceFeed);\\n        uint256 ethAmountInUSD = (ethPriceInUSD * ethAmount) / 1e18;\\n        return ethAmountInUSD;\\n    }\\n}\\n\",\"keccak256\":\"0xa2ee004c14d0369d121b3a4e1c1bfed2a5a89203fbcf667249c3a5743b741c1a\",\"license\":\"None\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200112738038062001127833981810160405281019062000037919062000110565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505062000142565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000d882620000ab565b9050919050565b620000ea81620000cb565b8114620000f657600080fd5b50565b6000815190506200010a81620000df565b92915050565b600060208284031215620001295762000128620000a6565b5b60006200013984828501620000f9565b91505092915050565b60805160a051610faa6200017d6000396000818161044a015261047d0152600081816102390152818161042201526105970152610faa6000f3fe6080604052600436106100865760003560e01c80639e87a5cd116100595780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063cedcaeda14610174578063d7b4750c146101b157610086565b80630343fb251461008b5780633ccfd60b146100c85780636b69a592146100df578063893d20e81461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610a36565b6101ee565b6040516100bf9190610a7c565b60405180910390f35b3480156100d457600080fd5b506100dd610237565b005b3480156100eb57600080fd5b506100f4610411565b6040516101019190610a7c565b60405180910390f35b34801561011657600080fd5b5061011f61041e565b60405161012c9190610aa6565b60405180910390f35b34801561014157600080fd5b5061014a610446565b6040516101579190610b20565b60405180910390f35b61016861046e565b005b610172610595565b005b34801561018057600080fd5b5061019b60048036038101906101969190610a36565b610800565b6040516101a89190610a7c565b60405180910390f35b3480156101bd57600080fd5b506101d860048036038101906101d39190610b67565b610818565b6040516101e59190610aa6565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102bc576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103675760008082815481106102e1576102e0610b94565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061035f90610bf2565b9150506102bf565b50600067ffffffffffffffff81111561038357610382610c3a565b5b6040519080825280602002602001820160405280156103b15781602001602082028036833780820191505090505b50600090805190602001906103c792919061092c565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561040e573d6000803e3d6000fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6802b5e3af16b18800006104ab7f00000000000000000000000000000000000000000000000000000000000000003461085f90919063ffffffff16565b10156104ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e390610cc6565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461061a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561069d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610653575b5050505050905060005b81518110156107285760008282815181106106c5576106c4610b94565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061072090610bf2565b9150506106a7565b50600067ffffffffffffffff81111561074457610743610c3a565b5b6040519080825280602002602001820160405280156107725781602001602082028036833780820191505090505b506000908051906020019061078892919061092c565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050506107fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f490610d32565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b600080828154811061082d5761082c610b94565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061086b8361089b565b90506000670de0b6b3a764000085836108849190610d52565b61088e9190610dc3565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156108e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090d9190610e81565b5050509150506402540be400816109249190610efc565b915050919050565b8280548282559060005260206000209081019282156109a5579160200282015b828111156109a45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061094c565b5b5090506109b291906109b6565b5090565b5b808211156109cf5760008160009055506001016109b7565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a03826109d8565b9050919050565b610a13816109f8565b8114610a1e57600080fd5b50565b600081359050610a3081610a0a565b92915050565b600060208284031215610a4c57610a4b6109d3565b5b6000610a5a84828501610a21565b91505092915050565b6000819050919050565b610a7681610a63565b82525050565b6000602082019050610a916000830184610a6d565b92915050565b610aa0816109f8565b82525050565b6000602082019050610abb6000830184610a97565b92915050565b6000819050919050565b6000610ae6610ae1610adc846109d8565b610ac1565b6109d8565b9050919050565b6000610af882610acb565b9050919050565b6000610b0a82610aed565b9050919050565b610b1a81610aff565b82525050565b6000602082019050610b356000830184610b11565b92915050565b610b4481610a63565b8114610b4f57600080fd5b50565b600081359050610b6181610b3b565b92915050565b600060208284031215610b7d57610b7c6109d3565b5b6000610b8b84828501610b52565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bfd82610a63565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c2f57610c2e610bc3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610cb0601283610c69565b9150610cbb82610c7a565b602082019050919050565b60006020820190508181036000830152610cdf81610ca3565b9050919050565b7f53656e64204661696c6564000000000000000000000000000000000000000000600082015250565b6000610d1c600b83610c69565b9150610d2782610ce6565b602082019050919050565b60006020820190508181036000830152610d4b81610d0f565b9050919050565b6000610d5d82610a63565b9150610d6883610a63565b9250828202610d7681610a63565b91508282048414831517610d8d57610d8c610bc3565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dce82610a63565b9150610dd983610a63565b925082610de957610de8610d94565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e1381610df4565b8114610e1e57600080fd5b50565b600081519050610e3081610e0a565b92915050565b6000819050919050565b610e4981610e36565b8114610e5457600080fd5b50565b600081519050610e6681610e40565b92915050565b600081519050610e7b81610b3b565b92915050565b600080600080600060a08688031215610e9d57610e9c6109d3565b5b6000610eab88828901610e21565b9550506020610ebc88828901610e57565b9450506040610ecd88828901610e6c565b9350506060610ede88828901610e6c565b9250506080610eef88828901610e21565b9150509295509295909350565b6000610f0782610e36565b9150610f1283610e36565b9250828202610f2081610e36565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610f5857610f57610bc3565b5b8282058414831517610f6d57610f6c610bc3565b5b509291505056fea2646970667358221220d521d960c3e5e2fdf09b9aa60aa4176a07e7b08aedb17b19d9658ad782d3a00664736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80639e87a5cd116100595780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063cedcaeda14610174578063d7b4750c146101b157610086565b80630343fb251461008b5780633ccfd60b146100c85780636b69a592146100df578063893d20e81461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610a36565b6101ee565b6040516100bf9190610a7c565b60405180910390f35b3480156100d457600080fd5b506100dd610237565b005b3480156100eb57600080fd5b506100f4610411565b6040516101019190610a7c565b60405180910390f35b34801561011657600080fd5b5061011f61041e565b60405161012c9190610aa6565b60405180910390f35b34801561014157600080fd5b5061014a610446565b6040516101579190610b20565b60405180910390f35b61016861046e565b005b610172610595565b005b34801561018057600080fd5b5061019b60048036038101906101969190610a36565b610800565b6040516101a89190610a7c565b60405180910390f35b3480156101bd57600080fd5b506101d860048036038101906101d39190610b67565b610818565b6040516101e59190610aa6565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102bc576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103675760008082815481106102e1576102e0610b94565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061035f90610bf2565b9150506102bf565b50600067ffffffffffffffff81111561038357610382610c3a565b5b6040519080825280602002602001820160405280156103b15781602001602082028036833780820191505090505b50600090805190602001906103c792919061092c565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561040e573d6000803e3d6000fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6802b5e3af16b18800006104ab7f00000000000000000000000000000000000000000000000000000000000000003461085f90919063ffffffff16565b10156104ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e390610cc6565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461061a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561069d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610653575b5050505050905060005b81518110156107285760008282815181106106c5576106c4610b94565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061072090610bf2565b9150506106a7565b50600067ffffffffffffffff81111561074457610743610c3a565b5b6040519080825280602002602001820160405280156107725781602001602082028036833780820191505090505b506000908051906020019061078892919061092c565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050506107fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f490610d32565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b600080828154811061082d5761082c610b94565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061086b8361089b565b90506000670de0b6b3a764000085836108849190610d52565b61088e9190610dc3565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156108e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090d9190610e81565b5050509150506402540be400816109249190610efc565b915050919050565b8280548282559060005260206000209081019282156109a5579160200282015b828111156109a45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061094c565b5b5090506109b291906109b6565b5090565b5b808211156109cf5760008160009055506001016109b7565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a03826109d8565b9050919050565b610a13816109f8565b8114610a1e57600080fd5b50565b600081359050610a3081610a0a565b92915050565b600060208284031215610a4c57610a4b6109d3565b5b6000610a5a84828501610a21565b91505092915050565b6000819050919050565b610a7681610a63565b82525050565b6000602082019050610a916000830184610a6d565b92915050565b610aa0816109f8565b82525050565b6000602082019050610abb6000830184610a97565b92915050565b6000819050919050565b6000610ae6610ae1610adc846109d8565b610ac1565b6109d8565b9050919050565b6000610af882610acb565b9050919050565b6000610b0a82610aed565b9050919050565b610b1a81610aff565b82525050565b6000602082019050610b356000830184610b11565b92915050565b610b4481610a63565b8114610b4f57600080fd5b50565b600081359050610b6181610b3b565b92915050565b600060208284031215610b7d57610b7c6109d3565b5b6000610b8b84828501610b52565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bfd82610a63565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c2f57610c2e610bc3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610cb0601283610c69565b9150610cbb82610c7a565b602082019050919050565b60006020820190508181036000830152610cdf81610ca3565b9050919050565b7f53656e64204661696c6564000000000000000000000000000000000000000000600082015250565b6000610d1c600b83610c69565b9150610d2782610ce6565b602082019050919050565b60006020820190508181036000830152610d4b81610d0f565b9050919050565b6000610d5d82610a63565b9150610d6883610a63565b9250828202610d7681610a63565b91508282048414831517610d8d57610d8c610bc3565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dce82610a63565b9150610dd983610a63565b925082610de957610de8610d94565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e1381610df4565b8114610e1e57600080fd5b50565b600081519050610e3081610e0a565b92915050565b6000819050919050565b610e4981610e36565b8114610e5457600080fd5b50565b600081519050610e6681610e40565b92915050565b600081519050610e7b81610b3b565b92915050565b600080600080600060a08688031215610e9d57610e9c6109d3565b5b6000610eab88828901610e21565b9550506020610ebc88828901610e57565b9450506040610ecd88828901610e6c565b9350506060610ede88828901610e6c565b9250506080610eef88828901610e21565b9150509295509295909350565b6000610f0782610e36565b9150610f1283610e36565b9250828202610f2081610e36565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610f5857610f57610bc3565b5b8282058414831517610f6d57610f6c610bc3565b5b509291505056fea2646970667358221220d521d960c3e5e2fdf09b9aa60aa4176a07e7b08aedb17b19d9658ad782d3a00664736f6c63430008110033",
  "devdoc": {
    "author": "Ameer Hamza",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This function gets conversion rate (Eth -> USD) from PriceConverter library"
      },
      "getAddressToAmountFunded(address)": {
        "details": "sAddressToAmountFunded is prefixed with s to demonstrate that it is storage variableStorage variables should be handled carefully because they will cost a lot of gas",
        "params": {
          "funder": "This should be a uint256"
        },
        "returns": {
          "amountFunded": "by the funder"
        }
      },
      "getFunder(uint256)": {
        "details": "sFunders is prefixed with s to demonstrate that it is storage variableStorage variables should be handled carefully because they will cost a lot of gas",
        "params": {
          "funderIndex": "This should be a uint256"
        },
        "returns": {
          "_0": "address of the funder"
        }
      },
      "getOwner()": {
        "details": "iOwner is prefixed with 'i' to show that it is immutableImmutable variables can save some gas",
        "returns": {
          "_0": "address"
        }
      },
      "getPriceFeed()": {
        "returns": {
          "_0": "priceFeed instance of AggregatorV3"
        }
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function collect funds and save into FundMe contract"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "This function returns the amount funded by any address"
      },
      "getFunder(uint256)": {
        "notice": "This function returns the funder by index"
      },
      "getOwner()": {
        "notice": "This function returns the owner of the contract"
      },
      "getPriceFeed()": {
        "notice": "This function returns the priceFeed instance"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "sFunders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "sAddressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}